Develop Chromium extension that enables text content edit. To cut the crap.

You select the paragraph to edit.
Edit it in place. (set contentEditable attribute to true)
When focus goes from edited element to another one we store the changes. Or we can store them at any change to the text content.
Reload page and edit is in place.

Bonuses:
- implement hashing and detect/report if original content was changed.
- publish in the web store https://developer.chrome.com/docs/extensions/mv3/getstarted/extensions-101/#distribution
- assign event listener to onclick with ctrl pressed


Incorporate
    - localStorage
    ? text fragments https://chromestatus.com/feature/4733392803332096

Grok promises to not use callbacks?
How to work with text with links/images?


API's to use:

- action for toolbar icon
- browserAction: toolbar icon, popups
- commands? adds hotkeys to extension
+ contextMenu
- debugger?
- declarativeContent?
- devtools.inspectedWindow
- dom? (ShadowRoot)
- events?
- notifications?
- runtime?
- scripting?
- storage? async bulk reads
- devtools.panels?


https://developer.chrome.com/docs/extensions/mv3/getstarted/extensions-101/#extension-files
https://developer.chrome.com/docs/extensions/mv3/getstarted/extensions-101/#distribution
https://developer.chrome.com/docs/extensions/mv3/tut_debugging/


+ Add context menu option item
    x Cannot get access to dom-element upon which context menu was opened
x Get access to element on which context menu item "cut" was selected
+ Use ctrl + left mouse button click combination to start things off
+ Set it's contentEditable to true
+ Set contentEditable to false on "esc" or on unfocus.
+ Should I bother to remove event listeners after first of two was fired?
- Store changes in localStorage
    + identify element which content was modified
        + css selectors path
            + include css celector generator into extension
                https://medium.com/@otiai10/how-to-use-es6-import-with-chrome-extension-bd5217b9c978 (content script)
            + blacklist "[contenteditable]" generated css-selector
                x function
                + regexp?
        - by it's content
    + get url
    + store changes in localStorage after onUnload event
        + store changes in object on "contentEditable = false"
        + add check if textContent was even modified
        x remove focuseout event listener in Escape keydown even listener to not store changes twice
    + locate element after reload and apply changes to its text
        + by selectors (check content too)
        - by content search
    + store hash of original content to track if original text was changed
    + use stored hash to check if original content was changed
    - indicate to user that original content was changed
+ automation of extension reloading to speed up development: add extension hot reload
    current manual flow:
        1) change extension sources
        2) go to extensions tab
        3) reload extension
        4) reload page on which we testing extension
    hot reload should eliminate 2, 3 and 4 steps

    After loading extension add listener to blur event to window: we changing active window from the browser to sth else (code editor). In this listener we catching focus to window: we make some changes and we need to reload extension.
    We calling chrome.runtime.reload and then do page reload.


    Why not just use any existed hot reloading npm-library? They all want webpack and I don't.

    x can't run chrome.runtime.reload from content script: https://developer.chrome.com/docs/extensions/mv3/content_scripts/#capabilities
    + use runtime.sendMessage and catch it in background.js
    + reload page after reloading extension


    logic scheme:

    blur -> focus -> reload extension -> reload page

    
    For now we have eliminated steps 2 and 3.

    Finally get step 4 eliminated.
